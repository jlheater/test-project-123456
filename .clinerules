# Project Intelligence & Patterns

## Core Workflow Patterns

### Build System Structure
- Use Makefile as primary orchestrator
- Language-specific implementations abstracted behind common interface
- Standard targets: build, test, package, deploy, lint, format
- Common interface must be maintained across all language implementations

### Documentation Standards
- All documentation in Markdown format
- Mermaid diagrams for architecture visualization
- Clear hierarchy in Memory Bank files
- Regular updates to activeContext.md and progress.md

### Development Workflow
- Containerized development environments
- Docker-based build isolation
- Cross-platform compatibility requirements
- Multi-version Python support (3.6, 3.9, 3.11)

## Key Implementation Patterns

### Makefile Patterns
- POSIX-compliant syntax required
- Language-agnostic interface design
- Support for parallel execution
- Clear error reporting essential
- Consistent target naming and behavior

### Docker Patterns
- Multi-stage builds preferred
- Minimal base images
- Standardized environments
- Version-specific configurations

### Pipeline Patterns
- Template-based configurations
- Environment-specific overrides
- Fail-fast behavior
- Comprehensive logging
- Stage-based organization

## Project Preferences

### Naming Conventions
- camelCase: variables, functions, methods
- PascalCase: class names
- snake_case: file names, directories
- UPPER_CASE: environment variables

### Code Organization
- Modular, reusable components
- Clear separation of concerns
- Abstraction of language-specific details
- Factory pattern for build implementations

### Testing Approach
- Language-specific test runners
- Unified test reporting
- Coverage tracking required
- Integration testing across languages

## Known Challenges

### Python Version Support
- Multiple version compatibility (3.6, 3.9, 3.11)
- Package version constraints
- Tool compatibility across versions
- Testing across versions

### Cross-Platform Support
- POSIX compliance required
- Multiple language support
- Container compatibility
- Build environment consistency

### Performance Requirements
- 15-minute maximum build time
- Parallel execution capability
- Resource-aware scheduling
- Build target optimization

## Learning Notes

### Project Evolution
- Started with Memory Bank structure
- Architecture design prioritized
- Stage-based pipeline implementation
- Language support implementation
- Python version compatibility added

### Critical Paths
- Makefile template is foundation
- Docker configurations essential
- Pipeline setup dependent on both
- Language support builds on base
- Version compatibility management

### Tool Usage
- Memory Bank updates for all changes
- Mermaid for architecture documentation
- Docker for build isolation
- GitLab for CI/CD orchestration
- Version-specific tooling
